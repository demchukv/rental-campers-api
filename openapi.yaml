openapi: 3.0.3
info:
  title: AquaTrack - OpenAPI 3.0
  description: |-
    This is a AquaTrack based on the OpenAPI 3.0 specification.
  version: 1.0.0
externalDocs:
  description: AquaTrack
  url: https://veronikapetrushka.github.io/fullstack-foundry/
servers:
  - url: https://aquatrack-api-myzh.onrender.com/api/
tags:
  - name: auth
    description: register, login and logout
  - name: users
    description: Operations about user
  - name: water
    description: Record daily water intake and track
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Add a new user
      description: Add a new user
      operationId: register
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "yourname@mail.com"
                password:
                  type: string
                  example: "m$vpshdYhd"
                repeatPassword:
                  type: string
                  example: "m$vpshdYhd"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
        '409':
          description: Email in use!
        '400':
          description: Validation exception
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ''
      operationId: login
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                  user: 
                    type: object
                    properties:
                      email: 
                        type: string
                      
        '401':
          description: Email or password is wrong!
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: ''
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: successful operation
  /auth/refresh:
    get:
      tags:
        - auth
      summary: Refresh user token
      description: ''
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                  user: 
                    type: object
                    properties:
                      email: 
                        type: string
                      
        '401':
          description: Not authorized!
  /auth/verify:
    post:
      tags:
        - auth
      summary: Resend verification email
      description: ''
      operationId: verifyResend
      requestBody:
        description: User email
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
            description: Successfull operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Verification email sent"
        '404':
          description: 'User not found'
  /auth/verify/{verificationToken}:
    post:
      tags:
        - auth
      summary: Verify user email
      description: ''
      operationId: verify
      parameters:
        - name: verificationToken
          in: path
          description: 'Verification token sended in email'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified"
        '404':
          description: User not found
  /auth/google:
    get:
      tags:
        - auth
      summary: redirect user to Google oauth2 service for authorization
      description: 'Past this URL in href attribute to tag a'
      operationId: google
      responses:
        '302':
          description: "redirect to Google"
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: send email to user with reset password link
      description: ''
      operationId: forgotPassword
      requestBody:
        description: User email
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
            description: Successfull operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Reset password email sent"
        '404':
          description: 'User not found'
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: reset user password
      description: ''
      operationId: resetPassword
      requestBody:
        description: User password and reset token
        content:
          application/json:
            schema:
              properties:
                resetToken:
                  type: string
                password:
                  type: string
                repeatPassword:
                  type: string
        required: true
      responses:
        '200':
            description: Successfull operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Password successfully changed"
        '400':
          description: "Bad request"
        '401':
          description: "Invalid token"
        '404':
          description: 'User not found'           
  /users/count-users:
    get:
      tags:
        - users
      summary: return total registered users
      description: ''
      operationId: countUsers
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                    example: 120
  /users/current:
    get:
      tags:
        - users
      summary: get detailed info about user
      description: ''
      operationId: getUser
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: return user info object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '401':
          description: unathorized
        '404':
          description: user not found
    patch:
      tags:
        - users
      summary: update user profile
      description: ''
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '400':
          description: Bad request
        '401':
          description: unathorized
        '404':
          description: user not found
  /users/avatar:
    patch:
      tags:
        - users
      summary: upload user avatar
      description: ''
      operationId: uploadAvatar
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    example: "https://res.cloudinary.com/dmo99evjz/image/upload/v1719002738/6675e4fde4b76438a11b4ea4.jpg"
        '400':
          description: Bad request
        '401':
          description: Not authorized
  /water/:
    post:
      tags:
        - water
      summary: add new water for tracking
      description: ''
      operationId: addWater
      security: 
        - bearerAuth: []
      requestBody:
        description: object with date in ISO format and volume of water
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Water'
      responses:
        '201':
          description: return object with added water
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Water'
        '400':
          description: not valid data
        '401':
          description: unathuorized
  /water/{id}:
    put:
      tags:
        - water
      summary: update track record
      description: ''
      operationId: updateWater
      security: 
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'objectID for tracked water'
          required: true
          schema:
            type: string
      requestBody:
        description: object with date in ISO format and volume of water
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Water'
      responses:
        '201':
          description: return object with added water
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Water'
        '400':
          description: not valid data
        '401':
          description: unathuorized
        '404':
          description: tracker record not found
    delete:
      tags:
        - water
      summary: delete track record
      description: ''
      operationId: deleteWater
      security: 
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'objectID for tracked water'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: record deleted
        '400':
          description: not valid data
        '401':
          description: unathuorized
        '404':
          description: tracker record not found
  /water/day:
    post:
      tags:
        - water
      summary: obtaining data on the water consumed by the user for the day
      description: ''
      operationId: getDayWater
      security: 
        - bearerAuth: []
      requestBody:
        description: date in ISO format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date-time
                  example: "2024-06-22T07:05:49"
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WaterDaily'
        '400':
          description: not valid data
        '401':
          description: unathuorized
  /water/month:
    post:
      tags:
        - water
      summary: obtaining data on the water consumed by the user for a month
      description: ''
      operationId: getMonthWater
      security: 
        - bearerAuth: []
      requestBody:
        description: date in ISO format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date-time
                  example: "2024-06-01"
                endtDate:
                  type: string
                  format: date-time
                  example: "2024-06-31"
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WaterMonth'
        '400':
          description: not valid data
        '401':
          description: unathuorized
components:
  schemas:
    baseUser:
      type: object
      properties:
        email:
          type: string
          example: yourmail@mail.com
        password:
          type: string
          example: 'JSD78jfk*hjd'
    UserFull:
      required:
        - email
        - dailyNorma
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: yourmail@mail.com
        name:
          type: string
          example: 'Nadia'
          default: null
        gender:
          type: string
          enum:
            - male
            - female
        avatar:
          type: string
          example: "https://res.cloudinary.com/dmo99evjz/image/upload/v1719002738/6675e4fde4b76438a11b4ea4.jpg"
        weight:
          type: integer
          default: null
          example: 59
        timeActivity:
          type: integer
          default: null
          example: 2
        dailyNorma:
          type: integer
          default: 2000
        createdAt:
          type: string
          format: date-time
          example: "2024-06-21T20:39:25.511+00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2024-06-22T20:39:25.511+00:00"
    UserUpdate:
      required:
        - email
        - dailyNorma
      type: object
      properties:
        email:
          type: string
          example: yourmail@mail.com
        name:
          type: string
          example: 'Nadia'
          default: null
        gender:
          type: string
          enum:
            - male
            - female
        weight:
          type: integer
          default: null
          example: 59
        timeActivity:
          type: integer
          default: null
          example: 2
        dailyNorma:
          type: integer
          default: 2000
    Water:
      type: object
      properties:
        amount: 
          type: integer
          example: '250'
        date:
          type: string
          format: date-time
          example: '2024-06-22T10:30'
    WaterDaily:
      type: object
      properties:
        _id:
          type: string
        owner:
          type: string
        amount: 
          type: integer
          example: '250'
        createdAt:
          type: string
          format: date-time
          example: "024-06-22T07:05:49.534Z"
        updatedAt:
          type: string
          format: date-time
          example: "024-06-22T07:05:49.534Z"
    WaterMonth:
      type: object
      properties:
        totalAmount: 
          type: integer
          example: '250'
        percentageOfNorma:
          type: number
          example: "85.5"
        date:
          type: string
          format: date
          example: "2024-06-22"
  securitySchemes:
    bearerAuth:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
